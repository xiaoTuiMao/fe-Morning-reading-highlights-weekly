{"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2024/04/19/hello-world/"},{"title":"前端早读精选 - 第一期","text":"探索前端技术的无尽旅程从这里开始！每周精选前端领域的热门文章，在这份汇总中，发现前端技术的精髓，概括个人观点，共同探索前沿技术与行业动向。与笔者一起在每周的学习中前行，不容错过的前端精选，助力你成为技术领域的探索者。 1. Ant Design Web3发布啦！Ant Design 作为前端 UI 组件库的老牌选手，正式发布 针对 web 3.0 社区的 UI 特性的组件库。除了提供了连接Web3 DApp所需的组件外，还额外提供了和链的交互的能力，支持以太坊及兼容EVM的链。具有通用API，适配不同区块链的能力。可作为纯UI组件使用，也提供适配器连接区块链。 2. structuredClone浏览器原生自带的深拷贝函数你是否还在为如何处理深拷贝一个未知数据类型对象而烦恼，使用 JSON.parse(JSON.stringify) 担心部分数据类型处理不符合预期（如 Date 会被处理为字符串），使用 lodash 又担心 tree-shaking 处理不当带来包体积的增长。现在这些烦恼，使用 structuredClone 都将被解决。当然我们还需要考虑其使用时的一些隐患。 浏览器兼容性 部分无法处理：函数、Dom 节点、属性描述符（setter、getter）、对象原型 3. AI 自动创建 React 组件 – V0Vercel 提供的代码生成工具让用户只需输入自己的需求，即可生成相应的 React 代码。对于使用 NextJS 框架的用户，更可享受一键直接安装使用的便捷。在笔者的试用中，简单场景下生成的组件基本可用，然而在复杂的需求描述中，生成的代码则显得不够实用。（PS：可能对中文的理解有限😅） 4. 总结：javaScript 与 TypeScript 在过去三年的全部新特新 有多少同学与笔者一样，在 ES6 推出后对 EScript 的新特性与规范关注甚少。通常，我们更多地依赖外部的技术文章获取关于这些新特性的信息，而在实际的应用中，除了一些常用的，其他新特性的了解相对较少。本文对过去三年内 JS 与 TS 的新特性进行了综合梳理。希望在我们完成日常需求之后，能够抽出时间深入了解这些新特性的使用，除了查漏补缺外，还可以了解它们背后创作的原因。 5. 年终总结：回顾一下 Robin Wieruch 的 2023 10个前端发展趋势 (META) FRAMEWORKS： 单页应用程序（SPA）及其相关框架（如React.js、Vue.js、Svelte.js）经历了多轮炒作，但最近几年，元框架的崛起表明应用程序正在从客户端渲染（CSR）转向服务器端渲染（SSR）。其中，Next.js成为最受欢迎的元框架之一，它在React.js的基础上提供了全方位的支持，为开发人员提供了出色的开发体验。 APPLICATION AND RENDERING PATTERNS： 过去十年一直被单页应用程序（SPA）主导，但最近几年对服务器端渲染（SSR）的兴趣不断增加。新兴的渲染技术，如增量静态再生（ISR）和流式SSR，正在改变渲染模式，为更细粒度的性能优化提供可能。 SERVERLESS AT THE EDGE： SSR和SSG的流行与无服务器边缘计算的趋势高度相关，旨在提供更快的网页和Web应用程序体验。各云服务提供商（例如Cloudflare、Vercel和Deno）竞相推出边缘计算服务，以实现最佳的时间交互体验。 DATABASE RENAISSANCE： 随着无服务器的崛起，数据库也经历了复兴。服务商如PlanetScale、Neon和Xata提供了与边缘缓存等功能结合的服务器数据库服务，为全球用户提供低延迟的数据交互。 JAVASCRIPT RUNTIMES： 从Node.js到Deno，JavaScript运行时的竞争激烈。云服务提供商通过实施自己的JavaScript运行时（如Cloudflare Workers）来优化基础设施，这使得JavaScript运行时的多样性成为需要关注的问题。 MONOREPOS： 单体仓库不再仅用于大型应用程序，而是成为小型公司和开源项目的热门选择。Turborepo等工具推动了单体仓库的热潮，使团队能够在单一版本控制存储库中构建所有应用程序和包。 UTILITY-FIRST CSS： Tailwind CSS等实用主义CSS工具在近期崛起，尤其在服务器端渲染（SSR）的环境中表现出色。相较于CSS-in-JS的解决方案，实用主义CSS在SSR环境下具有更好的性能。 END-TO-END TYPE SAFETY WITH TYPESCRIPT： JavaScript向TypeScript的演进不可阻挡。端到端的类型安全性在全栈应用中变得愈发重要，而使用OpenAPI或GraphQL Code Generator等工具可以实现对客户端和服务器端通信的类型安全。 BUILD TOOLS： Vite取代了一度主导React领域的create-react-app（CRA），成为单页应用程序的新宠。它借助esbuild实现更快的依赖项捆绑，为前端开发提供了更高效的工具。 AI DRIVEN DEVELOPMENT： GitHub Copilot和ChatGPT等工具为AI驱动的开发奠定了基础。开发者可以在其IDE中与AI程序员进行合作，实现代码的智能自动补全。 从笔者今年的经历来看，谈一下几个对自己感受比较大的方向 MONOREPOS：随着业务的增长，前端不再是简单的单业务单页面模式，更多的是领域模式。如交易领域、流量领域。每个领域都有着自己的特性，monorepo 的组织方式能够更有效的加速业务基础能力的沉淀。同时 Lerna、rushstack等管理工具，有效较低了工程化的解决成本。 JAVASCRIPT RUNTIMES：除了 Deno 与 NodeJS 的竞争，Bun 也是有利竞争者之一。 BUILD TOOLS： 今年看到的更多内容是构建性能提升，使用 rust 改写底层库的构建工具越来越多，作为一名前端，需要对 rust 保持一定的关注。 AI DRIVEN DEVELOPMENT： AI 绝对是今年最爆💥的方向，没有之一。各类好用的 AI 工具，让开发效率得到了极大提升。笔者现在已经深度依赖 Copilot 和 ChatGPT。 6. 年终总结：更快的 V8 引擎回顾 2023 年，V8 引擎主要做了以下事情 一个新的中间层编译器：Maglev。它的工作介于Sparkplug和TurboFan编译器之间。在机器码生成方面，相较于 Sparkplug 慢大约 20 倍，在机器码优化上，相较于 TurboFan 快了 10 到100倍 Turboshaft：顶层优化编译器的新架构。与 CPU 无关的后端操作编译速度提升了两倍 更快的 HTML 解析器、更快的 DOM 分配 JavaScript 新特性支持、更友好的 WebAssembly 支持 安全性能提升 附：Chrome V8 引擎中，Sparkplug、TurboFan、Maglev 引擎的工作职责 Sparkplug：Sparkplug 是 V8 引擎的初始编译器，它负责将 JavaScript 代码转换为机器码。Sparkplug 使用的是基于栈的架构，它可以快速生成机器码，但效率较低。 TurboFan：TurboFan 是 V8 引擎的优化编译器，它负责对 Sparkplug 生成的机器码进行优化。TurboFan 使用的是基于寄存器的架构，它可以生成更高效的机器码，但速度较慢。 Maglev：Maglev 是 V8 引擎的实验性编译器，它是 TurboFan 的替代方案。Maglev 使用的是基于 SSA（Static Single Assignment）的架构，它可以生成更高效、更易于优化的机器码。 Sparkplug 和 TurboFan 是 V8 引擎中的主要编译器，它们共同负责将 JavaScript 代码转换为机器码。Sparkplug 负责快速生成初始机器码，TurboFan 负责对初始机器码进行优化。 7. github 热门前端项目7.1 专为开发者提供的便签App – heynoteHeynote是一个专门为开发者准备的便签本。它的功能是作为一个大的持久文本缓冲区，您可以在其中写下任何您喜欢的内容。比较适合随手记录一些信息，支持快速新增 block，每个 block 都有自己的特性，如 Math block、markdown block、javaScript block 等 7.2 极简个人网站 – Shiro喜欢极简主义的同学注意啦！如果你想搭建一个极简风格个人网站，那么 Shiro 将会是一个不错的选择。 8. 杂七杂八 一个检查自己账户是否安全的网站 免费使用 Google Gemini 结语在这篇文章中，我们一同踏上前端技术的无尽旅程，每周探索前沿技术。Ant Design Web3、structuredClone、Vercel的AI自动生成React组件，以及JavaScript与TypeScript的新特性，展示了前端不断创新的面貌。Robin Wieruch的趋势总结指出了元框架崛起、无服务器边缘计算等重要方向。2023年，V8引擎的升级、AI驱动开发的兴起，为前端开发带来了更高效的工具和性能提升。同时，推荐了Heynote和Shiro等热门前端项目。在新的一年里，让我们继续前行，共同迎接更多前端技术的挑战与创新，成为技术领域的探索者。前端技术之旅永无止境，愿我们共同创造更精彩的前端未来！ 个人私货 科技周刊 属性描述符，setter 和 getter 123// 例如，使用 getter 时，会克隆结果值，但不会克隆 getter 函数本身（或任何其他属性元数据）：structuredClone({ get foo() { return 'bar' } })// Becomes: { foo: 'bar' } 对象原型 // 原型链不会被遍历或重复。因此，如果您克隆 的实例`MyClass`，则克隆的对象将不再被认为是该类的实例（但该类的所有有效属性都将被克隆） class MyClass { foo = 'bar' myMethod() { /* ... */ } } const myClass = new MyClass() const cloned = structuredClone(myClass) // Becomes: { foo: 'bar' } cloned instanceof myClass // false","link":"/2023/12/29/2023/0x20231229/"},{"title":"前端早读精选 - 第四期","text":"探索前端技术的无尽旅程从这里开始！每周精选前端领域的热门文章。文章方面，本期为大家带来 Node、Git 常用的技巧，在技术发展趋势上，探讨 Rust、Go、Node、Deno、Bun 多种技术在实际业务中的使用选择。工具方面，强推荐大家尝试一下 AI 提效工具。话不多说，详细内容请大家查阅。如果觉得有收获，动动大拇指点个赞，以示鼓励！ 文章推荐NodeJS 的一些开发技巧与性能优化手段 文章通过 Express 简单启动一个服务作为切入点，列举了常用的压力测试（ab、webbench、autocannon）、性能测试工具、debug工具（chrome devTool）。性能优化方面与内存管理，列举了一些常用的优化手段与内存管理方式。阅读大约 6 分钟，大家可以按需查漏补缺。 十个你应该知道的 Git 命令 Git是每个软件工程师必须知道的最基本的东西。这些工具是开发人员日常工作不可或缺的一部分，因为我们每天都与他们互动。精通Git不仅可以简化您的生活，还可以显著提高工作效率。在这篇博文中，我们将探索一组可以提高你的工作效率的命令。随着您越来越熟练地使用这些命令，您将节省宝贵的时间，并成为一名更高效的软件工程师。其中 git commit --amend -m 'msg' 很适合笔者这种直接用上一次命令快速commit的提交后，但是又想要改一下commit 信息，使其更符合这次提交的信息，又不想再修改文件的情况下使用，可以直接将最后一次的 commit 信息进行修改。也比较适合一个需求最后阶段做个总结的 commit 信息补充。 REST API 设计最佳实践 想了解 REST API 设计的原则，可以看一下这篇文章。阅读大约 4 分钟，文章阐述了 10 条设计 REST API 的最佳实践。 7 种”防御型编程“方式 当我拿出“防御型编程代码”，请问阁下将如何应对。文章列举了 7 种在日程编写代码种容易出现的编码陋习，并给到了更优的写法。快来看看自己的代码是否是这 7 种防御型代码。 2023 年最大技术分歧：选 Rust 还是 Go ？ 在 Stack Overflow 2022 开发者调查中，对于“让人爱恨交织的编程语言”这个问题，在 7 万份回复中，程序员们明显也更为偏爱 Rust，86% 的人表示喜欢 Rust，而 64% 的人表示喜欢 Go。面对 Rust 的火爆现状，一些开发者发出了灵魂提问：2023 年，Go 还值得学习吗？ 笔者选 rust！哈哈哈哈哈哈哈！ 2024 年你应该使用 Bun、NodeJS 还是 Deno？ 对于你下一个重要的 JavaScript 项目，应该选择什么呢？嗯，事情并不那么简单。理解每个运行环境的优势和劣势是很重要的。因此，本文通过比较 Bun、NodeJS 和 Deno，深入探讨它们的优点、缺陷等方面。 简单总结一下三者优缺点 优缺点 NodeJS Deno Bun 优点 1. 非阻塞 I/O 和可伸缩性提供了更高的性能 2. 成熟的生态系统，拥有众多的库和框架 3.庞大而活跃的社区支持 1. 安全性高 2. 天然支持 TS，开发体验更优 3. 通过 URL 简化模块管理 1. 学习曲线低，Bun 是一个全能的工具包 2. 使用JavaScriptCore 引擎，性能更高 缺点 1.单现成特性存在性能瓶颈，不适合CPU密集型任务 2. 容易陷入异步编程回调地狱 1. 生态不成熟 2. 三方库可用性有限 1. 社区支持有限，属于新推出产品 那么实际项目中，怎么选择技术方案？ Node.js：如果你更喜欢经过多年试验和测试的稳定可靠生态系统，那么这是首选的运行环境。 Deno：如果你优先考虑安全性和最新的编程环境特性，则建议使用 Deno。它还原生支持 TypeScript。 Bun：如果你需要高速度，特别是在使用 JavaScript 或 TypeScript 时，那么这个运行环境应该是你的首选。 Bun 作为一个新的轮子，并且荣获2023 最受欢迎第二名，可见社区对其的期待，想了解更新关于 Bun 的信息，可查看相关文档 工具推荐h5player 一个油猴视频增强脚本，支持所有H5视频网站，例如：B站、抖音、腾讯视频、优酷、爱奇艺、西瓜视频、油管（YouTube）、微博视频、知乎视频、搜狐视频、网易公开课、百度网盘、阿里云盘、ted、instagram、twitter等。全程快捷键控制，支持：倍速播放/加速播放、视频画面截图、画中画、网页全屏、调节亮度、饱和度、对比度、自定义配置功能增强等功能，为你提供愉悦的在线视频播放体验。还有视频广告快进、在线教程/教育视频倍速快学、视频文件下载等能力 oxlint更快的 Lint 工具 比 eslint 快 50- 100 倍的 lint 工具正式发布。在真实测试场景下，Shopify 报告称，他们需要 75 分钟的 eslint 检测，在使用 oxlint 后，仅仅只发给 10 秒。简单易用，可以在没有配置文件的场景下，在项目根路径下运行 npx oxlint@latest 即可。但 oxlint 尚未提供插件系统，所以暂时不支持 TypeScript、React、Jest、Unicorn、JSX-a11y 和 Import 等流行插件的规则。 笔者建议：如果当前项目 Lint 耗时并不是效率瓶颈，可以先保持观望一波！ mdcat 一个可以在命令行显示 Markdown 文件渲染后的内容工具。体验了一下，能够识别部分语法，但是想表格、勾选框这一类的没有识别 DOMPurify 专注于Dom 的 XSS 清除程序 DOMPurify 专注于消除 HTML、SVG 和 MathML 中的潜在恶意代码，通过在将用户提供的内容插入到 DOM 之前，清理和净化这些内容来防范 XSS 攻击。相较于 XSS在过滤 Dom 的场景下，DOMPurify 要更快，但在处理一些特定场景（如处理纯字符串）时不如一些通用的 XSS 过滤库灵活。简单来说，如果你主要关注在前端处理用户输入并防范 XSS，DOMPurify 是一个强大的选择，尤其是在处理 DOM 内容方面。如果你需要通用的 XSS 过滤功能，或者对性能要求不是特别严格，”xss” 包可能是一个更通用的选择。 everyone-can-use-english 一款使用 electron 创建的学习英语的软件。支持添加视频音频学习资料。同时还支持机器人对话翻译，单词本，打卡记录等多种功能。注意一点：启动项目后需要使用 Mixin-Messenger 进行登录，但是 Mixin-Messenger不支持国区，iOS 用户可以切换 AppStore 地区进行下载，笔者切换至土耳其下载成功，安卓用户可以使用 google-play 下载安装。 通过AI工具提升开发效率 文章推荐了几款在日程开发过程中，能够提升我们开发效率的AI工具，如Copilot、GPT-Engineer、Cody AI、React Agent、v0、Sweep AI、ScriptGPTGPT 工程师即将崛起！🤣🤣🤣 everyone-can-use-english 一款使用 electron 创建的学习英语的软件。支持添加视频音频学习资料。同时还支持机器人对话翻译，单词本，打卡记录等多种功能。注意一点：启动项目后需要使用 Mixin-Messenger 进行登录，但是 Mixin-Messenger不支持国区，iOS 用户可以切换 AppStore 地区进行下载，笔者切换至土耳其下载成功，安卓用户可以使用 google-play 下载安装。 通过AI工具提升开发效率 文章推荐了几款在日程开发过程中，能够提升我们开发效率的AI工具，如Copilot、GPT-Engineer、Cody AI、React Agent、v0、Sweep AI、ScriptGPTGPT 工程师即将崛起！🤣🤣🤣","link":"/2024/01/19/2024/0x20240119/"},{"title":"前端早读精选 - 第二期","text":"总结趋势系列年终总结：2023 最受欢迎的 NodeJS 框架 Framework Description Released Growth Next.js Next.js 是一个用于构建 React 应用程序的框架，提供强大的路由系统、服务器渲染、自动代码分割等功能。它被设计用于构建现代的、可扩展的 Web 应用程序，支持静态生成和服务器渲染。 2016 +53.3/day tRPC tRPC 是一个用于构建类型安全、现代化的后端服务的框架。它允许你使用 TypeScript 定义 API，然后自动生成客户端和服务端代码，以提供类型安全的 API 调用。tRPC 支持多种后端框架，包括 Express、Fastify 等。 2020 +51.5/day Nest Nest 是一个用于构建可扩展且模块化的后端应用程序的框架。它基于 TypeScript，提供了依赖注入、模块化、强大的路由系统等功能。Nest 可以用于构建 RESTful API、WebSocket 应用程序等。 2017 +26.5/day Remix Remix 是一个构建在 React 生态系统之上的现代 JavaScript 框架，专注于构建 Web 应用程序。Remix 的目标是提供一种更好的开发体验和性能优化，通过强调一些现代前端开发最佳实践来简化复杂的应用程序构建。 2020 +24.3/day Strapi Strapi 是一个开源的 Headless CMS，允许开发者创建和管理内容 API。它提供了一个用户友好的界面，支持自定义数据结构和字段，并可通过 API 提供内容。Strapi 可以与各种前端框架和技术一起使用。 2015 +23.7/day SvelteKit SvelteKit 是一个用于构建现代 Web 应用程序的框架，基于 Svelte 框架。它提供了路由、状态管理、服务端渲染等功能，并以编译时生成的方式优化应用程序。SvelteKit 强调简单性和性能 2020 +17.6/day Directus Directus 是一个开源的 Headless CMS，专注于提供可扩展的自定义数据库。它允许开发者通过直接访问数据库表和字段来定义内容结构，同时提供强大的 API，可用于构建各种类型的应用程序。 2012 +17.1/day Redwood Redwood 是一个全栈 JavaScript 框架，旨在简化前端与后端的集成。它使用 React 进行前端开发，GraphQL 作为 API 查询语言，Prisma 用于数据库访问。Redwood 支持自动代码生成、服务端渲染等功能，以提供开发人员高效构建全栈应用的能力。 2019 +12.7/day Nuxt Nuxt.js 是一个基于 Vue.js 的前端框架，用于构建服务端渲染 (SSR)、静态站点生成 (SSG) 和单页应用 (SPA)。Nuxt 提供了一系列的约定和配置选项，简化了 Vue.js 应用程序的开发和部署。 2016 +12.4/day Fastify Fastify是轻量级、高性能的Node.js Web框架，专注于提供快速、低开销的HTTP服务。其采用低开销插件系统、支持异步编程、强调Schema验证，使其成为构建高性能、生产就绪的Web服务的理想选择 2016 +11.3/day Express Express 是一个基于 Node.js 的后端框架，用于构建 Web 应用程序和 API。它是一个轻量级、灵活且易于扩展的框架，通过中间件的概念，可以方便地添加各种功能。Express 提供了路由、HTTP 请求和响应处理等基础功能。 2009 +10.8/day Keystone KeystoneJS 是一个用于构建内容管理系统 (CMS) 和 Web 应用程序的 JavaScript 框架。它基于 Node.js 和 Express，并使用 GraphQL 作为 API 查询语言。Keystone 提供了一个灵活的数据模型、自动生成的管理界面和强大的查询能力，适用于构建各种类型的应用程序。 2018 +4.9/day 上述大部分框架在笔者日常工作中都有接触，其中tRPC 是笔者第一次接触，这里补充一下 tRPC 的信息。之前在 Node 端调用 rpc 接口更多的是选择使用thrift 对 IDL 文件进行编译后使用，而 tRPC 允许您轻松构建和使用完全类型安全的 API，而无需模式或代码生成。采用 Protobuf 协议。 简单对比一下二者的区别： 特性/包 trpc thrift 静态类型检查 支持，利用 TypeScript 的类型系统 需要手动进行类型检查和处理，不如 TypeScript 强大 编译过程 不需要显式编译，利用 TypeScript 编译器 需要将 Thrift 文件显式编译成目标语言的代码 运行时依赖 可能需要 TypeScript 运行时依赖 部分语言可能需要 Thrift 运行时依赖 社区支持 相对年轻，社区规模较小 相对成熟，有较大的社区支持 代码生成 利用 TypeScript 的自动生成功能 需要显式编译 Thrift 文件生成代码 开发体验 针对 TypeScript 用户友好，提供良好的开发体验 可能需要额外配置和步骤，不如 TypeScript 开发体验好 项目适用性 适用于 TypeScript/JavaScript 项目 适用于多语言项目 同时二者在 RPC 的协议上页有一定区别，这里页简单对比一下二者的区别： 特性/协议 Protobuf Thrift 序列化格式 二进制 二进制 语言支持 支持多种编程语言，包括Java、C++、Python等 支持多种编程语言，包括Java、C++、Python等 可读性 较小且二进制，不易人工阅读 二进制，不易人工阅读 性能 通常比JSON和XML更快 通常比JSON和XML更快 动态类型 不支持动态类型，需要先定义消息格式 支持动态类型，无需预先定义消息格式 扩展性 支持向后兼容性的版本控制 支持向后兼容性的版本控制 语法 使用.proto文件定义消息结构 使用IDL文件定义消息结构 字段标签 使用数字标签标识字段，更紧凑 使用字段名作为标签，可读性更好 社区支持 由Google维护，有较大的社区支持 由Apache维护，有稳定的社区支持 适用场景 适用于大规模数据交换和高性能要求的场景 适用于大规模数据交换和高性能要求的场景 发展趋势 2024 年后端和 Web 开发趋势 文章深入探讨了2024年后端和Web开发的关键趋势。首先，人工智能（AI）和机器学习（ML）在后端开发中的融合被强调，涵盖了代码生成、安全改进、个性化、预测分析和推荐引擎等方面，以提高开发效率。其次，Serverless Architecture 被认为将在2024年继续扩展，通过减少服务器管理，提高可扩展性和成本效益。Edge computing 作为新兴技术，被列为能够减少延迟、提高性能和实现实时数据处理的关键趋势。ZTA 架构的出现改变了传统的网络安全模型，强调验证身份、最小特权访问、微分割和数据加密等原则。物联网作为快速增长的软件开发趋势，涉及连接的物理设备通过互联网收集和交换数据，与云计算平台相结合构建可靠的后端系统。此外，对开发者健康的关注也体现在人体工程学键盘的推崇。最后，文章列举了2024年流行的编程语言和框架，包括 Rust、JavaScript、Python、Django、Node.js、Svelte和 Qwick。 工具推荐qnm 用于查询node_modules目录的 cli 工具我们经常需要快速检查 node_modules目录下安装的模块的版本。通常我们会运行 npm list 或者 yarn list 来进行查找，其运行速度很慢，而且会产生很多不相关的输出。qnm 是一个工具，它通过提供关于已安装模块的快速和集中的信息来解决这个问题。它同时支持npm和yarn，并允许你快速识别你感兴趣的模块的版本。 面试工具推荐马上又到了找工作的金三银四，准备迎接金三银四求职高峰了吗？接下来为大家推荐两款工具，希望对大家找工作有所帮助 rxresu.me 一个免费和开源的简历生成器，简化了创建、更新和分享简历的过程。 没有用户跟踪或广告，隐私是最优先考虑的。支持自主托管，可以在不到30秒的时间内自托管。 支持同时管理多份简历 实时编辑预览 丰富的排版模式 更多丰富的功能 如何高效的使用leetCode 通过对相似算法进行分类，找到各类问题的解决方案，培养将新的问题映射到已知问题的能力。文章收集了大约 20 个这样的编码问题模式，了解这些模式背后的想法，一旦你熟悉了一种模式，你将用它解决许多问题。详细的问题讨论可以查看Grokking the Coding Interview 经验输出试试这个来替换console.log文章列举了 console 的其它几类用法，在更合适的场景下采用对应的方法，而不是一昧的使用console.log。其中比较令笔者印象深刻的是，console.trace()，可以将方法的调用堆栈打印出来，这个在一些复杂调用的场景下会很有帮助。 12345678910111213function trace(){ console.trace()}function randomFunction(){ trace();}/* 输出console.trace- trace- randomFunction- (anonymous)*/ 前端 10 个最佳实践（React）从前端开发的角度出发，我们将聚焦于代码的工程结构和组织方式，逐步探讨工程化标准的建设。最终，我们将深入研究 React 的真实开发场景，重点关注如何有效实现UI与逻辑的分离。此外，在处理性能问题时，我们还将介绍一系列有效的手段。这篇文章旨在为前端开发者提供全面的视角，帮助他们在项目中建立清晰的代码结构，规范化工程流程，并在React应用中实现高效的UI与逻辑分离，同时掌握处理性能问题的有效方法。 Node 最佳实践经典的 NodeJS 最佳实践，2023 年新增 14 条最佳实践，更新 12 条最佳实践。快来看吧！)","link":"/2024/01/05/2024/0x20240105/"},{"title":"前端早读精选 - 第三期","text":"总结系列2023 JS受欢迎库盘点 2023 年度盘点，根据比较过去12个月在GitHub上添加的 Star 数量与对 Best of JS 的项目进行分析，得到一个与 web 平台相关的最佳项目列表。 总体最流行项目排行其中 shadcn/ui最让笔者意外，接下来让我看看一款复制粘贴的一组 UI 组件如何席卷全球！ shadcn/ui 是一款基于 React 的 UI 组件库，通过 TailwindCSS 定制样式。其建立在 Radix之上，与其它传统 UI 组件库不同的是，它不是一个 NPM 包，你可以通过 cli 的命令将代码集成到你本地，或者直接从官网将对应的源码粘贴到你本地。在前两期我们介绍过的 v0.dev，其生成的 UI组件代码就使用了 shadcn/ui。简单看一下通过 cli 安装到本地的代码，对于有一定业务定制诉求的需求来说，基于源码维度的修改不要太方便！ 另外列举几款笔者比较感兴趣的项目介绍： **tldraw**：一个好用的画图工具，上榜的 excalidraw也是同类型的画图工具。在一些负责的系统架构图上，drawio 也是一个不错的选择。 **tauri**：使用 Web 前端技术构建更小、更快、更安全的桌面应用程序。相较于 Electtron ，tauri 的脚手架要丰富很多，能够快速搭建一个小 demo 上手，这对新手玩家来说很重要。下面简单对比一下二者的优缺点： 特征/优缺点 Tauri Electron 使用的技术 使用 Rust 和 Web 技术（HTML/CSS/JS/TS） 使用 JavaScript/TypeScript、HTML 和 CSS 二进制文件大小 相对较小 相对较大 启动时间 较短 较长 系统资源占用 相对较少 相对较多 跨平台支持 是，支持 Windows、macOS 和 Linux 是，支持 Windows、macOS 和 Linux 安全性 考虑较多，使用 WebAssembly 和沙盒技术 较低，共享主进程可能存在潜在的安全风险 自定义窗口和功能 是，提供灵活的 API 是，提供灵活的 API 社区和生态系统 相对较小但活跃 相对较大且成熟 开发语言 使用 Rust（底层）和 Web 技术 使用 JavaScript/TypeScript、HTML 和 CSS 学习曲线 相对较陡，需要了解 Rust 相对较缓，使用 Web 技术更为常见 适用场景 适用于对二进制大小、启动时间和系统资源占用要求较高的项目 适用于较大型应用，对二进制大小和启动时间要求相对较宽松 前端最受欢迎项目大部分项目都是大家日程接触过或正在使用的项目，这里介绍一个号称能让让 react 速度提升 70%的项目 – Million。 Million 是一个轻量级、快速的虚拟 DOM 库，它使用编译器来预先计算用户界面。这使得 Million 的性能比传统的虚拟 DOM 库更高，并且可以减少 JavaScript 包的大小。并且 Million 可以作为 React-DOM 的替代品，来提升 react 性能。 Million 的优势包括： 性能：Million 的性能比传统的虚拟 DOM 库高出 133% 到 300%。 包大小：Million 的包大小只有 1KB，比传统的虚拟 DOM 库小得多。 易用性：Million 的 API 与 React 类似，可以快速上手。更多关于 Million的介绍，可以点击查看 最受欢迎的后端/全栈项目 tRPC 在上周的周刊中已经介绍了，这里再对另外一款笔者比较感兴趣的项目–Astro 项目做一个简单介绍。提到 Astro 就不得不提其群岛的前端设计架构。“Astro 群岛“指的是静态 HTML 中的交互性的 UI 组件。一个页面上可以有多个岛屿，并且每个岛屿都被独立呈现。你可以将它们想象成在一片由静态（不可交互）的 HTML 页面中的动态岛屿。在 Astro 中，“岛屿”指的是页面上的任何交互式 UI 组件。你可以将岛屿想象成在一片由静态、轻量级、服务器渲染的 HTML 所构成的海洋中所漂浮的交互式小部件。岛屿始终独立于页面上的其他岛屿运行，且一个页面上可以存在多个岛屿。尽管岛屿在不同的组件上下文中运行，它们仍然可以共享状态并相互通信。这种灵活性使得 Astro 能够支持多个 UI 框架，如 React、Preact、Svelte、Vue 和 SolidJS。由于它们是独立的，你甚至可以在每个页面上混合使用多种框架。详细的群岛架构设计文档请看：群岛架构：Jason Miller 更多细分领域榜单，请点击查看。 文章推荐what-is-htmx htmx 在2020年 11 月正式发布 1.0.0 版本。它可以用超文本(标记)的简单和强大来创建尖端的用户界面。它提供了使用属性直接在HTML中访问AJAX、CSS过渡、WebSockets和服务器发送事件的功能。对于开发人员来说，这已经成为游戏规则的改变者，因为它使他们能够仅从标记中实现交互性(JavaScript提供的)。 引用 Jamie Birch 在前端2024趋势预测 UI框架板块对其的评价 In the background, though, is the refreshingly measured advocation of HTMX, which, although it may be the worst framework, is becoming increasingly hard to ignore in this age of complex build tooling. react-server-component 对于最近网上讨论比较凶的 react-server-component的观点输出。本文评估了React Server Components在Next.js中的应用。作者认为React Server Components为React引入了服务器端能力，强调了其在用户体验和开发者体验方面的一些优点和局限性。文章中提到对批评的考虑以及作者对React演进的回顾。作者指出React Server Components的一些新特性，并讨论了其中的一些优势和不足之处，包括在处理高级用例时可能变得繁琐的问题。此外，文章还提及了与Next.js App Router相关的问题，包括对内置fetch API的修改和增加的复杂性，以及JavaScript bundle的大小问题。最后，作者总结了对React和Next.js未来发展方向的一些观点，认为解决现有的客户端问题同样重要。 工具推荐vx.dev Vercel 的 v0.dev 可以通过输入需求，直接生成网站。这里是它的一个开源仿制品，通过逆向工程进行模仿，详见介绍文章。 Github Copilot Chat 作者发现 Github Copilot Chat 的底层是调用 ChatGPT 接口，因此做了这个工具。可以实现将 Github Copilot 转换为 ChatGPT。具体实现原理 杂七杂八nostalgist 一个在浏览器中运行怀旧游戏主机模拟器的 JavaScript 库，比如运行任天堂FC 模拟器、世嘉 MD 模拟器、街机模拟器等等。 结语本文全面盘点了2023年JavaScript库热门趋势，通过GitHub Star和Best of JS项目分析，列举了web平台相关的最佳项目，特别关注了shadcn/ui等。此外，作者还介绍了其他有趣项目，包括tldraw、tauri、Million等。在后端/全栈方面，文章关注了Astro。除了库的盘点，还推荐了一些工具如Vercel的v0.dev、Github Copilot Chat、nostalgist等。这些工具包括网站生成、代码生成和怀旧游戏模拟器等","link":"/2024/01/12/2024/0x20240112/"},{"title":"前端早读精选 - 第六期","text":"探索前端技术的无尽旅程从这里开始！每周精选前端领域的热门文章。文章方面，本期为大家带来，来自腾讯的2023前端年度技术盘点与2024技术展望、深度剖析正则原理、新的前端图片格式 -avif、以及css与前端轮训小技巧。工具方面，带来近期霸榜 GitHub Trending 的12306抢票、前端代码查重工具、google 网页索引工具与对shell更友好的bun-shell。话不多说，详细内容请大家查阅。如果觉得有收获，动动大拇指点个赞，以示鼓励！ 文章推荐穿越时空：2023年前端技术盘点与2024年技术展望 2023 年在前端行业发生的一些重要事情： 语言与标准：CSS、ES 和 TS 语法持续完善，社区竟现反 TS 声音 前端框架：主流框架持续完善，黑马 Htmx 与 Qwik 异军突起 前端基础建设：多种语言助力前端基建的持续发展 Chrome 浏览器：加强对用户数据安全的保护 低代码：持续完善的低代码引擎开源社区 D2C：C2D2C 亮相，大模型赋能 D2C 未来可期 大模型：大模型应用能力持续完善与落地 跨端：鸿蒙应用开发为跨端带来新变化 WASM: 未来将与更多语言和场景结合 音视频：传统编解码与 AI 编解码并驾齐驱 对于未来技术展望 大模型持续为前端赋能 拥抱 TypeScript 是前端语言与标准的主旋律 探索更好服务端渲染是前端框架的大势所趋 Rust 是前端基础建设的未来 鸿蒙入局，跨端三分天下格局指日可待 TypeScript 依然是前端语言与标准，虽然社区最近对于 TS 的看法各不一样，但是从目前的笔者负责的业务场景看，TS 依然是最佳选择。关于 C2D2C，笔者也抱有期待。通过前端标准化组件与设计标准结合，设计师基于现有组件库输出设计稿，前端研发拿到对应设计稿再转换为可执行代码。由于设计稿和代码使用的是同一套设计系统，设计稿中的组件和最终代码中的组件是一一映射的关系，因此无需进行标注就可以实现组件的精准识别。同时在代码的二次可发与可读性上也会得到很大改善。强势崛起的Qwik也是一个值得关注的框架：号称历史上第一个 O(1) 的前端 SSR 框架。如果你对其 SSR 性能感兴趣，可以通过这篇文章了解。👉🏻点击查看👉🏻阅读全文了解更多内容 为什么 2024 年应该使用 AVIF 而不是 JPEG、WebP、PNG 和 GIF avif 对比传统的图片格式，在压缩效率、颜色深度有着明显的优势，但在编解码的效率上相对低一些。不过在新的浏览器环境下尝试 avif 未尝不是一个好的选择。附：avif 与 webp 对比 特性 AVIF WebP 压缩效率 高（更小的文件大小，保持高质量） 较高但通常不如AVIF 图像质量 支持更广泛的颜色范围和动态范围，适合高分辨率图像 良好，但在颜色和动态范围上不如AVIF 浏览器兼容性 相对较新，支持不如WebP广泛 几乎所有现代浏览器支持 编解码速度 编码较慢 编码和解码速度较快 功能支持 支持高动态范围（HDR）和透明度 支持透明度，有损和无损压缩，但在HDR上支持不足 应用场景 适合对图像质量有高要求的应用 适合需要快速处理和广泛兼容性的应用 浅谈正则表达式——从原理到实战 这篇文章是关于正则表达式的深入讨论，从基本语法到实际应用全面介绍了正则表达式的各个方面。内容包括正则表达式的组成、不同类型的字符和匹配模式、贪婪与非贪婪匹配的概念以及它们在性能上的影响。文章还探讨了捕获组、匹配模式和前瞻/后顾断言的概念。最后，讨论了正则表达式的底层原理，特别是非确定性有限自动机（NFA）和确定性有限自动机（DFA）在处理正则表达式时的差异。想要深入了解正则的同学，点击阅读全文 JavaScript WTF: Why does every() return true for empty arrays? 文章从数学的角度探讨为，什么当数组为空数组时，[].every(item =&gt; true) 会返回 true, [].some(item =&gt; true)，会返回 false，这一表现是否符合你的直觉。 every: It is vacuously true that all elements of the empty set satisfy any given condition some: The “exists” quantifier states that the result is false for any empty set. the-surprising-things-that-css-can-animate 当您想到动画 CSS 属性时，您会想到哪些？文章列举了一些通常与动画无关的属性，用 CSS 可以实现的一些意想不到的动画效果，以及通过动画效果可以实现的一些巧妙的效果来实现动画。 一个健壮的前端轮询 文章讨论了在不使用websocket做服务端推送的情况下，如何写出一个健壮的前端轮询。文章提供了一些常见的前端轮询的应用场景以及可能遇到的问题，并逐一给到了解决方案。 笔者从文章中衍生一个场景，当列表筛选时，每次筛选项的变化，都需要前端重新请求。但是前端筛选项 UI 变化不依赖 API 数据返回，如果此时用户操作过快，同时存在多个筛选请求时，也需要考虑到请求废弃的问题，同样可以借助文章中的思路去解决。 工具推荐py12306 还没买到票的同学看过来！一款12306 购票助手，支持集群，多账号，多任务购票以及 Web 页面管理。支持本地部署，快来试试吧！ 前端代码重复度检测 听说过论文查重，那阁下是否听说过代码查重？在前端开发中，代码的重复度是一个常见的问题。重复的代码不仅增加了代码的维护成本，还可能导致程序的低效运行。为了解决这个问题，有许多工具和技术被用来检测和消除代码重复。其中一个被广泛使用的工具就是jscpd。 google-indexing-script 使用此脚本可让你的网站在 48 小时内在 Google 上建立索引。无需任何复杂技巧或黑客手段，只需简单的脚本和 Google API 即可。注意： 脚本并不会帮助你的网站在 Google 上的排名，只会让 Google 知道你的网站存在。 脚本使用到 Google Indexing API。虽然不能绝对保证每个页面都被索引到，但最近在 2023 年 12 月测试显示有非常高的成功率。 the-bun-shell bun-shell 提供性能更优，操作更简洁的 shell 集成命令，同时也解决了在 JS 中跨平台运行的兼容性问题 更多推荐高德地图官方首度揭秘：红绿灯倒计时功能是如何实现的？ 近日，高德地图官方发布视频首度揭秘了**“红绿灯倒计时读秒”功能背后的实现原理，那就是依赖过往车主的行驶启停规律，运用云端大数据算法推算出具体红绿灯读秒时间，甚至路口临时设置移动式红绿灯**，虽然没有接电和接网，但高德地图依然会显示红绿灯倒计时状态。笔者曾一度以为高德的红绿灯读秒是接入了交通数据。 GitHub的榜一大佬晒出存款后，大家却想给他捐钱 Sindre 是 Github 上拥有最多 Star 的个人。其 Star 个数甚至比阿里巴巴还要多。Sindre 甚至被称为 npm 之神，因为大家用的 npm 包大概率底层直接或间接都依赖了他的软件包。想要了解大佬，👉🏻点击查看 附：gitstar-ranking","link":"/2024/02/02/2024/0x20240202/"},{"title":"前端早读精选 - 第八期","text":"探索前端技术的无尽旅程从这里开始！每周精选前端领域的热门文章。文章方面，本期为大家带来，Web 终极拦截技巧，通过hook完成各类神奇的事情、NodeJS 2023 工作总结、NextJS 与 Remix 全方面对比、overflow 使用小技巧；工具方面，强烈推荐翻译软件：沉浸式翻译。阅读英文文章的不二之选！、独立开发者出海工具指南。话不多说，详细内容请大家查阅。如果觉得有收获，动动大拇指点个赞，以示鼓励！ 文章推荐Web 终极拦截技巧在Web开发中使用的一些高级拦截技巧。文章内容包括如何拦截和重写浏览器API、操作事件和DOM元素，以及使用ServiceWorkers和服务器端拦截。此外，文章还探讨了这些技术的实际应用，例如创建沙箱环境和开发通用域名服务。 笔者附录： 很认同文章开头的一句话：计算机科学领域的任何问题都可以通过增加一个中间层来解决。 —— Butler Lampson。但是在解决问题时增加中间层，更多的是一种临时或者 hack 的解决方案，并不是大部分场景的最佳解决手段。 在做系统功能拦截时，必要的安全问题也需要考虑。对于代码嵌入，常用的攻击手段，如：XSS、原型污染。关于XSS 攻击手段，想必各位同学都比较了解。这里简单补充一下原型链污染：它发生在攻击者通过修改一个对象的原型（即对象的__proto__属性或通过其原型链）来添加或修改属性时。当这个被污染的原型被应用程序的其他部分使用时，可能会导致意料之外的行为或安全问题。比较知名的攻击事件：lodash.defaultsDeep 方法造成的原型链污染 nodejs-2023-year-in-reviewRafael，Node.js技术指导委员会成员和Fastify核心团队成员，分享了关于过去一年Node.js演进的有用更新，团队如何确保Node.js经过了充分的测试并且可靠，Node.js外部依赖的变化（在2023年新增了三个），以及Node.js安全性和Web存在方面的增强。 笔者附录：NodeJS 新的吉祥物：Rocket Turtle Next.js vs. Remix: A Developer’s DilemmaNext.js vs. Remix： A Developer’s Dilemma — 比较了各个领域，从各种技术的实现方式到部署、支持和受欢迎程度。 使用 overflow: clip 替换 overflow: hidden 驱动滚动动画当使用animation-timeline: scroll(nearest) 来实现滚动动画时，因为 overflow: hidden 会创建一个滚动容器，它可能会干扰到滚动驱动动画的滚动查找机制。使用 overflow: clip 能有效的规避这个问题。overflow: clip 与 overflow: hidden 的表现形式类似，区别点在与 clip 不会创造滚动容器，且无法通过 JS 改变滚动属性来实现滚动。 笔者附录： 关于 animation-timeline 属性，提供一种更细粒度的控制方式来协调复杂的动画序列，使得开发者可以更精确地安排动画的执行顺序和同步。如上述例子中的animation-timeline: scroll(nearest)，会根据滚动容器的 scrollTop 去驱动滚动动画百分比。但需要注意的是，当前这个属性还属于实验阶段，更多信息 工具推荐沉浸式翻译沉浸式网页双语翻译扩展，支持PDF翻译，双语Epub电子书制作，Youtube/Netflix/Udemy 等平台双语字幕，支持Deepl/Google等多个翻译服务，免费使用。一款免费的，好用的，没有废话的，革命性的，饱受赞誉的，AI 驱动的双语网页翻译扩展，帮助你有效地打破信息差，在手机上也可以用！同时推荐给大家一个使用 AI 翻译时，价格更便宜的接入方式：aihubmix indie-hacker-tools出海第一步，搞定工具库。仓库收录了独立开发者出海技术栈和工具，持续整理中……仓库收录标准： 帮助独立开发者提升开发效率 帮助独立开发者降低成本 市场上足够流行 更多推荐职场焦虑症｜如何做自己的思想工作？本文作者根据十年工作经验分享了一些关于职场焦虑症的故事，还有一些应对技巧。希望大家在新的一年，开会不吵架，做项目不倒排。 在 GitHub 上发现超过 100,000 个受感染的存储库国外安全研究和数据科学团队发现，去年年中开始的恶意仓库混淆活动出现了复苏，这一次的规模更大。这次攻击影响了超过100,000个GitHub仓库（推测还有数百万个），当不知情的开发者使用看似已知且可信的仓库，实际上这些仓库却被恶意代码感染。","link":"/2024/03/01/2024/0x20240301/"},{"title":"前端早读精选 - 第九期","text":"探索前端技术的无尽旅程从这里开始！每周精选前端领域的热门文章。文章方面，本期为大家带来，CSS 布局单位梳理、如何使用 Performance 打造自己的性能报告、V8 引擎最新更新摘要、如何更好的实现音频倍速播放；工具方面，新的效率神器-&gt;基于截图或网页链接AI自动生成代码、基于图片生成音乐的 AI 工具、上古 NodeJS 框架–Express，迎来新的迭代、Mac 自带图片处理小工具；行业新闻方面，对于现代网站不断膨胀的JS代码的探讨、AI 行业到底有没有护城河。话不多说，详细内容请大家查阅。如果觉得有收获，动动大拇指点个赞，以示鼓励！ 文章推荐CSS 基于容器的相对布局单位虽然当前有很多可用的 CSS 单元，但在日常开发过程中，主要还是像素和 （r）ems 来调整大小和字体。随着CSS规范不断迭代，新的单位属性越来越多，是时候好好整理一下这些单位的含义了。该系列总共分为三部分，本篇文章是第三部分，探讨了CSS中基于容器的长度单位，这是一个新的概念，允许开发者根据元素的容器大小来定义尺寸和间距，而不仅仅是依赖于像素或相对于视口的单位。作者通过实例演示了如何使用这些单位（如cqw和cqh）来创建更灵活和适应不同屏幕尺寸的布局。这些单位提供了一种新的方法来思考和实现响应式设计，使得组件可以根据其父容器的大小动态调整样式。前两部分内容请查阅：第一部分-基于字体的相对布局单位、第二部分-基于窗口的相对布局单位 附：基于容器的相对布局单位简单总结 cqw：容器查询宽度（Container Query Width） cqh：容器查询高度（Container Query Height） cqi：容器查询内联尺寸（Container Query Inline-Size） cqb：容器查询块尺寸（Container Query Block-Size） 注意：如果父容器定义了具体的宽度，那么 cqw 与 cqi 的表现形式是一样的。在 flex 布局中，cqi 等于 flex-basis 的值，而在 grid 布局中，cqi 等于 column-width 的值 如何使用性能 API 报告核心 Web 指标这篇文章介绍了如何使用Performance API来报告核心网络体验指标（Core Web Vitals）。Performance API是一套标准，用于通过JavaScript测量和评估性能指标，能够直接在DOM中生成性能指标，为开发者创建自己的报告提供便利。文章还探讨了新的核心网络体验指标——交互到下一次绘制（INP）的测量方法，该指标将在2024年3月替代首次输入延迟（FID）。 V8 JavaScript 引擎的最新更新摘要V8 是全球最流行的 JavaScript 引擎，支持 Chrome 和 Node.js 等技术。V8 的开发速度令人印象深刻，每天有多个代码提交，大约每个月都有主要版本。文章探讨了 Google 对 V8 的最新改进与补充。更多V8 迭代信息，可查看V8 2023 全年总结 不改变音调情况下Audio音频的倍速合成JS实现快节奏的生活，让大家在观看长视频时，时常会开启倍速播放，大家是否想过，当倍速播放时，音频如何尽可能的还完原有音调。如果你也有类似的问题，不妨来看看张鑫旭大佬的解决方案。 工具推荐截图生成代码这个简单的应用程序可以将截图转化为代码（HTML/Tailwind CSS，或React或Bootstrap或Vue）。它使用GPT-4 Vision（或Claude 3）来生成代码，并使用DALL-E 3生成相似的图像。现在，你也可以输入一个URL来克隆一个现有的网站。 基于图片生成音频的AI工具一款基于图片生成音频的AI工具，只需要上传图片就可以根据图片的特点生成对应的音乐。 捕捉到了熊猫的快乐精神，文本的文化背景以及点赞的大拇指，最后以欢快欢快的旋律，充满弹性的钢琴，欢快的弦乐和欢快的木管乐器，融入了二胡和琵琶等中国传统乐器输出音频， expressjs号外！号外！上古 NodeJS 服务端框架发布新版本了！！！Express经过了十六个月，迎来了一个新版本。本次更新是一次小版本更新，主要是对历史 bug 的一些修复。话说现在有同学在使用 Express 开发么？大家对 Express 怎么看，欢迎大家在评论区踊跃讨论！ sips：Mac 自带的可编程图形处理系统如果你想把 Mac 上一些 .webp 的图片转换为 .png，那么你可以直接使用 sips。sips 是 mac 上默认的系统命令，除了简单的命令行处理外，它还支持编写 JavaScript！！! 更多推荐不断膨胀的JavaScript文章讨论了2024年前端开发中JavaScript的膨胀问题，通过各种类型的网站（如社交媒体、电子邮件、视频平台等）的实际JavaScript文件大小，揭示了即使是基本功能也可能需要大量的JavaScript代码。作者发现，许多网站的JavaScript大小远远超出了合理范围，例如，谷歌邮箱页面可能需要高达20MB的JavaScript。这种趋势不仅增加了网页加载时间，还影响了浏览器的解析和执行效率，进而影响用户体验和设备电池寿命。作者认为，网站的内容应该比代码更重要，呼吁开发者优化代码以减少不必要的JavaScript膨胀。 作者分析完这么多网站，发现有一个网站做的很好。那就是 jQuery 官网 谷歌研究员：“我们的AI没有护城河，OpenAI也没有”谷歌内部正在讨论，如何应对 OpenAI 公司的 ChatGPT。这个研究员提出自己的看法：即使谷歌全力投入，可能也赢不了这场 AI 竞赛。原因如下： 生成式 AI 的核心技术是开源的，任何人都可以获取。 AI 模型的替代性很强。 AI 的核心竞争力在于算力和训练语料。 AI 的研究人员是流动的。","link":"/2024/03/08/2024/0x20240308/"},{"title":"前端早读精选 - 第七期","text":"探索前端技术的无尽旅程从这里开始！每周精选前端领域的热门文章。文章方面，本期为大家带来，React 2024 RoadMap、2024 你应该关注的前端框架、手把手教你如何完成一个开源库的完整流程、利用 qwik 替换react开发微型项目、react-native 对 Apple Vision Pro 支持；工具方面，融合多个 AI 工具的GUI软件 - Noi、AWS 新的 JS runtime - LLRT、迷宫、地形和角色的JavaScript程序生成器 - Labyrinthos。话不多说，详细内容请大家查阅。如果觉得有收获，动动大拇指点个赞，以示鼓励！ 文章推荐What We’ve Been Working On – February 2024 React 团队 2024 RoadMap。其中 React Compile 取得了不错的进展，在 Instagram 生产环境中已经落地。React Compiler 能够通过对 JavaScript 规则_和_“React 规则”进行建模来安全地编译代码，从而提高性能。同时也会有相应的语法限制，通过启用严格模式并配置 React 的 ESLint 插件来捕获 React 代码中的细微错误，提高当前应用程序的质量，为后续适配 React Compiler 提供基础。React 正在探索使用服务器操作将数据从客户端发送到服务器的解决方案 – Actions。action函数可以同步或异步操作，并且&quot;use client&quot;和&quot;use server&quot;来们标记代码的执行环境，&quot;use client&quot;指示会生成&lt;script&gt;标签（如Astro Island），同时&quot;use server&quot;告诉捆绑器生成 POST 端点（如tRPC Mutations），不会将代码打包到JS bundle 中。想要体验上述的部分新功能，可以使用 React Canary，目前 Actions 的能力已经集成到 Canary 版本中。由于当前很多新功能将会是一个breaking change，所以 react 的下一个版本将会是大版本升级 React V19。最后还有一个小的改动，将Offscreen 重新命名为Activity。“Offscreen”这个名称意味着它仅适用于应用程序中不可见的部分，但在研究该功能时，React 团队意识到应用程序的某些部分可能是可见的和不活动的。新名称更准确地反映了将应用程序的某些部分标记为“活动”或“非活动”的行为。 React、Angular、Next.js、Solid 创建者告诉你，2024 年你需要关注哪些框架！ 在The New Stack上讨论了主要JavaScript前端框架如Angular、Next.js、React和Solid的未来计划和发展。每个框架关注不同的方面： Angular：强调更精细的反应性和使Zone.js可选，这将导致更快的加载时间和初始渲染。 Next.js：计划简化缓存，提高性能，并引入新的编译器以加快工具操作速度。 React：旨在扩大对React Server Components的采用，并继续开发新功能，如React Forget和Static Hermes。 Solid：预计将发布SolidStart 1.0和Solid.js 2.0，专注于基本原语，并提供一个可更换部分的元框架，以提供更大的灵活性。 附 Static Hermes 的一些信息Static Hermes 是 Hermes 引擎的下一代版本，它在 Hermes 的基础上增加了静态类型检查和提前编译功能，从而进一步提高了 JavaScript 代码的性能。 静态类型检查：Static Hermes 可以对 JavaScript 代码进行静态类型检查，从而发现潜在的类型错误并防止其在运行时发生。这可以提高代码的可靠性和安全性。 提前编译：Static Hermes 可以将 JavaScript 代码提前编译为原生机器代码，从而提高代码的执行效率。Static Hermes 的主要优势在于： 更高的性能：Static Hermes 可以将 JavaScript 代码的执行效率提高到与 C/C++ 代码相当的水平。 更小的代码包：Static Hermes 可以将 JavaScript 代码包的大小缩小 20% 到 50%。 更强的安全性：Static Hermes 可以通过静态类型检查来防止类型错误的发生。相较于 Hermes，Static Hermes 更侧重于编译时，除了更好的性能与安全性也会带来一定的语法限制。更多信息参考 如何使用 TypeScript、测试、GitHub Actions 发布包并自动发布到 NPM 文章阐述如何用 TypeScript 编写一个库与对应的单元测试，并将编译后的代码、类型在包中发布。使用 github Action 完成 CI 构建测试流程，最后发布到 NPM。还在本地发包的同学，不妨参考一下该自动化流程。 在Astro中使用 Qwik 替换 react 针对一些轻量级的web项目。使用 Astro构建，默认情况下，它向客户端发送零 JavaScript — 对于快速、轻量级和高性能的内容网站来说非常出色。但有时，我需要一些客户端 JavaScript 来实现交互性。此时，我发现自己很难在普通的 Vanilla JavaScript 还是 React 之间做出选择。一方面，Vanilla JavaScript 通常比 React 更轻量级，但它可能变得难以维护。 React 在某种程度上解决了这个问题，但对于最小的客户端 JavaScript 需求来说，它太重。这个时候不妨考虑一下 react 的替换方案 – Qwik。 announcing-react-native-for-apple-vision-pro React Native 现已在 Apple Vision Pro 上可用，为开发人员释放了该平台的全部潜力。与兼容模式不同，这种方法可以在visionOS上实现沉浸式体验和XR功能。还在等什么，花 $3000 上车 Vision Pro 🐶🐶🐶 工具推荐Noi 集成了多款 AI 应用的 GUI 程序。 LLRT LLRT 是一种实验性的轻量级 JavaScript runtime，旨在满足对快速高效的无服务器应用程序不断增长的需求。与 AWS Lambda 上运行的其他 JavaScript 运行时相比，LRT 的启动速度提高了 10 倍以上，总体成本降低了 2 倍。它采用 Rust 构建，利用 QuickJS 作为 JavaScript 引擎，确保高效的内存使用和快速启动。目前可以通过配置 Lambda functions 来使用LLRT。但需要注意的是，LLRT 仅支持一小部分 Node.js API。它不是 Node.js 的替代品，也永远不会。LLRT 适用与对性能要求较高的函数，因此不建议将有 node_modules 依赖的函数进行部署。 Labyrinthos 一个用于迷宫、地形和角色的JavaScript程序生成器。专为游戏开发者和专业爱好者，迷宫。js 提供了一个非常简单易用的API来制作复杂的，可定制的景观 更多推荐史上最快大模型炸场！Groq一夜爆红，自研LPU速度碾压英伟达GPU 还没消化完Sora带来的震撼，又一家硅谷初创企业带着史上最快的大模型和自研芯片LPU霸占了热搜。英伟达的挑战者Groq登场！抛弃GPU，自研LPU！文本生成速度比眨眼还快！推理场景速度比英伟达GPU快10倍，但价格和耗电量都仅为后者十分之一。笔者体验了一下，快是”挺快“的，但是问题回答的准确性有待提高。😂😂😂 附：LPU 相关信息LPU是一种较新的概念，专门为机器学习和人工智能应用设计。它们旨在优化深度学习运算和算法。对于专注于深度学习和AI的项目，LPU可能是一个更高效的选择。然而，对于需要更广泛应用和灵活性的场景，GPU可能是更好的选择。 设计用途：LPU是一种较新的概念，专门为机器学习和人工智能应用设计。它们旨在优化深度学习运算和算法。 应用领域：LPU主要用于深度学习、神经网络训练、数据分析等领域。 技术特点：与GPU相比，LPU可能有更专门化的架构，专门针对深度学习的运算需求，比如更快的矩阵乘法和更高效的数据流管理。 因为360，火绒干掉了win 10的电脑桌面。 什么！好端端的我的桌面被干掉了！一场来自操作系统与热门软件间的趣事！","link":"/2024/02/23/2024/0x20240223/"},{"title":"前端早读精选 - 第十一期","text":"探索前端技术的无尽旅程从这里开始！每周精选前端领域的热门文章。 **文章推荐**：本期为大家带来，E2E 测试框架Playwright使用指南、npm依赖安装风险解析、2024 react 工具指南、TS 中 interface 与 type 使用区别、10 个你应该知道的 VSCode 使用技巧； **工具推荐**：更轻量更快的模板引擎 - eta.js、完全开源的高效复现类Sora视频生成方案 - OpenSora **行业新闻**：李彦宏“程序员将不再存在”、全球首个AI程序员诞生 Devin 如果觉得有收获，欢迎大家点赞👍🏻订阅 文章推荐Playwright视觉测试终极指南这篇文章是关于如何使用 Playwright 进行视觉测试的终极指南，详细介绍了视觉测试的概念、好处、实施步骤以及最佳实践。通过视觉测试，可以自动验证应用的视觉一致性，捕捉到其他测试方法可能忽略的界面问题。文章详细说明了如何设置和运行视觉测试，包括如何创建和比较快照，以及如何在持续集成/持续部署（CI/CD）流程中应用视觉测试。 延伸阅读： Playwright 和 Cypress 主要区别及优缺点如下： 浏览器支持：Playwright 支持多浏览器（Chrome, Firefox, Safari, Edge），Cypress 主要支持 Chrome, Firefox, Edge。 运行模式：Playwright 支持无头和有头模式，Cypress 主要是有头模式。 网络控制：Playwright 提供更强的网络请求拦截和模拟能力。 并行测试：Playwright 内建支持并行测试，而 Cypress 需要额外配置。 社区和生态：Cypress 由于较早发布，拥有更成熟的社区和插件生态。 综上 Playwright 的优点在于其跨浏览器支持和强大的测试功能，但社区相对较新。Cypress 用户界面友好，易于上手，具有稳定的社区支持，但在浏览器支持和高级测试功能上可能不如 Playwright。 👉 原文链接：Playwright视觉测试终极指南 npm 安装脚本风险在安装依赖时，是否有考虑这个开源的包所带来的副作用？文章探讨了npm安装脚本如何被武器化，通过一个有害npm包的实例展示了这种风险。以一个具体的例子介绍了恶意包的工作原理，如何通过preinstall脚本执行危害行为，并讨论了npm安装脚本的正当用途和潜在危险。同时，提供了防范建议，比如使用--ignore-scripts选项，以及利用自动化工具进行依赖分析和执行策略。 延伸阅读：Deno 在安全性的考虑上要比 Node、Bun 更为严格一些，Deno 默认不允许运行时访问外部资源（如文件系统、网络等）除非明确授权，这减少了恶意代码执行的风险。Deno 也不使用 npm，而是直接从 URL 导入模块，这改变了包管理的方式，避免了 npm 中存在的一些安全隐患。 👉 原文链接：npm 安装脚本风险 React Libraries You Should Use In 2024文章概述了2024年值得使用的React库，包括开发框架（如Vite和Next.js），包管理器（如NPM和Bun），CSS/UI库（如Tailwind CSS和ShadCN），状态管理（推荐Zustand），数据获取（如Tanstack Query和SWR），路由（React Router和Tanstack Router），认证（如Supabase和NextAuth），数据库与ORM（推荐SQL和Prisma），日期时间处理（如date-fns和day.js），表单处理（推荐React Hook Form），拖放功能（推荐DnD Kit），移动应用开发（如React Native和Expo），以及部署（推荐Vercel）。如果你有一个没有历史包袱的 React 工程，不妨考虑这些实践。 👉 原文链接：React Libraries You Should Use In 2024 TS 中 interface 与 type 使用区别这篇文章介绍了TypeScript中interface和type的使用区别。它讲述了两者的核心功能和使用场景，其中interface主要用于定义数据结构，且可以合并多次声明，而type可以表示不同类型的组合，但不支持合并。这篇文章旨在帮助开发者有效地在TypeScript开发中选择合适的构造使用。 👉 原文链接： TS 中 interface 与 type 使用区别 10个VSCode 技巧提升你的研发效率这篇文章为VS Code用户提供了十个提高生产力的关键技巧，如使用多光标编辑、利用代码片段快速编程、定制工作区视图等。文章深入浅出地解释了每个技巧，帮助开发者更高效地使用VS Code。阅读完文章，相信你会更熟练的使用 VSCode 👉 原文链接：10个VSCode 技巧提升你的研发效率 工具推荐更轻量更快的模板引擎 - eta.jsEta.js 是一个轻量级、高性能的嵌入式JavaScript模板引擎，适用于Node.js、Deno和浏览器环境。它使用TypeScript编写，强调优异的性能、配置灵活性和小的捆绑大小。Eta具有零依赖性，压缩后大约3.5KB，并支持Deno、Node和浏览器。它还提供强大的功能，如预编译、部分视图、异步处理和布局支持。与其他模板引擎相比，Eta提供了一些独特的优势： 与EJS相比，Eta更轻量级，提供更快的模板编译和渲染速度，允许左侧空白控制，提供更灵活的定界符和插件支持，并改进了错误报告机制。 与doT.js相比，Eta简化了自定义定界符的设置，支持异步处理和运行时部分视图，并提供更准确的字符串和多行注释解析。 与Handlebars相比，Eta更加轻量和快速，不需要注册大量助手函数就能执行简单任务，同时Eta的模板作为受信任的代码运行，这意味着它可以执行任何合法的JavaScript表达式。 👉🏻工具官网 更轻量更快的模板引擎 - eta.js Open-Sora： 完全开源的高效复现类Sora视频生成方案Open-Sora项目是一项致力于高效制作高质量视频，并使所有人都能使用其模型、工具和内容的计划。 通过采用开源原则，Open-Sora 不仅实现了先进视频生成技术的低成本普及，还提供了一个精简且用户友好的方案，简化了视频制作的复杂性。 通过 Open-Sora，我们希望更多开发者一起探索内容创作领域的创新、创造和包容。 👉🏻工具官网 Open-Sora： 完全开源的高效复现类Sora视频生成方案 行业新闻李彦宏“程序员将不再存在”言论被周鸿祎驳斥，网友怒怼：先把百度程序员都开除了！在 3 月 9 日央视的《对话》·开年说节目上，百度创始人、董事长兼 CEO 李彦宏表示，基本上以后不会存在“程序员”这种职业了，因为只要会说话，人人都会具备程序员的能力。“未来的编程语言只会剩下两种，一种叫做英文，一种叫做中文，这也是目前世界上人工智能技术最领先的两个语言。”对此网友怒怼：先把百度程序员都开除了！ 👉🏻 原文地址 全球首个AI程序员诞生 Devin全球首位AI软件工程师Devin诞生了，它掌握全栈技能，云端部署、底层代码、改bug、训练和微调AI模型都不在话下。最可怕的是，它完全不怕996，老黄的预言是彻底成真了！ 👉🏻原文地址 全球首个AI程序员诞生，码农饭碗一夜被砸，10块IOI金牌华人团队震撼打造，996写代码训练模型","link":"/2024/03/22/2024/0x20240322/"},{"title":"前端早读精选 - 第十期","text":"探索前端技术的无尽旅程从这里开始！每周精选前端领域的热门文章。文章方面，本期为大家带来，为什么用 Tauri 替换 Electron做桌面软件、如何用 npm+typescript打造完善的monorepo仓库、神奇的CSS实现各类花式提示框、2024了，你该知道的git命令；工具方面，黄仁勋“几乎每天用”的搜索引擎 – Perplexity、AI图片处理工具：image-tools、nvm GUI工具；行业新闻方面，腾讯技术专家总结 15 年工作经验、星舰又炸了，但这也最成功的一次。话不多说，详细内容请大家查阅。如果觉得有收获，动动大拇指点个赞，以示鼓励！ 文章推荐为什么选择Tauri 替代 Electron 做桌面应用文章深入分析了Electron与Tauri在开发桌面应用方面的对比。Electron，虽然广受欢迎，但因其较大的应用体积和较慢的性能遭到批评。相比之下，Tauri以其轻量级和高性能获得优势，主要使用Rust语言，提供了更高的效率和安全性，尽管存在学习挑战。作者选择Tauri的核心原因包括更小的应用体积、更快的性能和更高的安全性，这些特性使Tauri成为构建现代桌面应用的理想选择。笔者体验过两款框架的开发，在易用性上 Tauri 确实对新手比较好，能够很快上手，但缺点也很明显，Tauri 对系统API 支持的丰富度与社区丰富度上，跟 Electron 相比，确实还有较大差距。 使用 npm + TypeScript 打造 monorepo 仓库文章详细阐述了如何结合npm和TypeScript在monorepo项目中实现高效的依赖管理和模块化构建。通过引入npm工作区，作者展示了如何优化项目结构，使不同的包能够共享依赖，同时保持各自的独立性。此外，文章还提供了关于配置TypeScript来支持monorepo结构的指南，包括设置共享的tsconfig基础配置和解决跨包引用的方法。这种方法旨在提高开发效率，简化项目维护，并优化构建过程。 用CSS实现提示气泡针对功能点的提示气泡，是业务开发过程中，常见的需求之一。如何在最小的标记与最大的灵活性的前提下使用 CSS 来完成功能开发呢？文章介绍了 clip-path，border-image 结合 CSS 变量的方式去实现各种复杂场景的气泡功能，同时尽可能的保持灵活性。该系列文章分为两部分，第一部分主要讲述基本的实现功能， 第二部分将探索更多场景下的提示气泡的实现方式。 更好用 git 新命令介绍了几个现代化的Git命令和功能，包括git switch和git restore（自Git版本2.23开始引入），用于切换分支和恢复文件的最后提交版本；git sparse-checkout（自Git版本2.25引入），用于在大型仓库中高效地检出子目录；以及git worktree和git bisect，分别用于管理多个工作树和通过二分查找定位引入错误的提交。 工具推荐perplexity黄仁勋“几乎每天用”的搜索引擎 – Perplexity。Perplexity自称为“世界上首个对话式搜索引擎”，核心使命是：挑战谷歌在搜索引擎领域的主导地位。与谷歌传统搜索引擎不同，Perplexity并非简单给出网站链接，而是运用先进的人工智能模型，针对用户的搜索问题提供直接、精准的答案，这种模式提升了搜索效率，也使得搜索过程更为智能；而与ChatGPT等生成式AI相比时效性更强、可溯源。 AI-image图片处理工具，支持通用抠图、人像抠图、背景替换。 通用抠图：处理输入图像中的主体，支持商品、人物、动物、植物、汽车等，无需任何额外输入，实现端到端的通用抠图并输出四通道抠图结果， 人像抠图：处理包含肖像的输入图像，无需任何额外输入，实现端到端的肖像抠图，并输出四通道图像抠图结果 背景替换：输入一张肖像照片和背景图片，即可生成抠图结果并更改背景，一键完成！ nvm-desktop不习惯使用 NVM CLI，那不妨试试 nvm 的 GUI 软件。 更多推荐入行 15 年，我还是觉得编程很难程序员的职业成长，可能是诸多行业中最难的那一批了： 校园时学的计算机理论，工作了几乎用不上； 技术的革新太快，轮子还没精通就被时代淘汰； 虚拟环境总是顺风顺水，一上生产环境就劫难重重； 面试时候要求造核弹，工作以后拧螺丝，聊绩效时说没有造核弹的思考； 觉得技术是最重要的，又觉得只会技术走不远，于是既丢掉了对技术的追求，也没学会对业务的思考； ……写代码很简单，写好代码很难；编程的精髓是“创造”；技术很重要，但“人”也许更重要；程序员最大的敌人是什么？ 马斯克的星舰又炸了，但这是最成功的一次目前为止最成功的星舰试飞，目标打卡 2 个半","link":"/2024/03/15/2024/0x20240315/"},{"title":"前端早读精选 - 第十二期","text":"探索前端技术的无尽旅程从这里开始！每周精选前端领域的热门文章。 **文章推荐**：本期为大家带来浏览器原理解析、 通过 Web Component 融合多款前端框架、 浏览器渲染流水线解析与网页动画性能优化、 React 官方的跨端方案 react-strict-dom、 Css 文档对齐小技巧 – hanging-punctuation； **工具推荐**：AI 编程伴侣 – GPT PILOT、多平台支持的截图、录屏、录音、录像、录制(动图)gif 工具 – pear-rec **行业新闻**：AI 手机来了，App 将消亡，前端开发范式变了？ 如果觉得有收获，欢迎大家点赞👍🏻订阅 文章推荐[推荐 🔥]浏览器原理解析chrome 团队分享的浏览器原理解析。系列一共有 4 个部分，第一部分主要是深入探讨 Chrome 浏览器，从高级架构到渲染流水线的细节。 第二部分阐述了，Chrome 的内部运作方式，从在浏览器中输入网址开始，到浏览器从互联网提取数据并显示网页，整个过程经历了什么。第三部分将详细阐述渲染程序进程是如何渲染。第四部分介绍 Chrome 如何处理用于显示网站的代码。相信大家看完对浏览器的工作原理会有更深的理解。 👉🏻原文链接：浏览器原理解析 通过 Web Component 融合多款前端框架 [英]作者通过在一个待办事项应用中融合使用了React、Vue、Solid和Svelte四个不同的JavaScript框架，展示了Web组件的互操作性。作者创建了自定义的Web组件，允许每个框架的组件独立运作且相互集成，实现了在单一应用中同时使用多个框架的目标。这种方法展现了Web组件能够跨框架工作的能力，有助于避免开发过程中对某个特定JavaScript框架的依赖，从而提高了代码的复用性和应用的灵活性。代码地址 👉🏻原文链接：Web Components Eliminate JavaScript Framework Lock-in 浏览器渲染流水线解析与网页动画性能优化文章全面阐述了浏览器渲染流水线，从Blink引擎处理HTML、CSS到Layer Compositor和Display Compositor的图层管理和最终输出。文章探讨了多进程架构，解释了每个进程在渲染中的作用，并详细讨论了帧的生成及其对动画流畅性的重要性。同时，文章也关注了移动设备上的渲染性能，特别是JavaScript绑定和光栅化的影响，并展望了GPU光栅化等技术对未来渲染流水线的潜在改进。 👉🏻原文链接：浏览器渲染流水线解析与网页动画性能优化 react-strict-dom [英]Meta 官方推出的React Native Web 的继任者，它将允许我们使用一个代码库构建通用应用程序，并使用平台的 API 在多个目标上交付，而不会出现任何妥协或性能问题。react-strict-dom 采用了与 React Native for Web 相反的方法，它利用 Web API 来渲染组件。为此，它添加了两个小的 polyfill，负责将其 API 翻译为 react-native 和 react-dom 两个环境下的原生实现。 👉🏻原文链接：react-strict-dom CSS 中的hanging-punctuation属性[英]文章讨论了CSS中的hanging-punctuation属性，该属性通过使标点符号悬挂在文本对齐边缘之外来增强文本可读性，实现更整洁的文本对齐。这个属性对于改善网页设计中的文本布局非常有用，可以使文本跨行对齐更加美观。文章还探讨了如何使用这个属性，它可以采用的不同值，以及它对文本布局的视觉影响。 👉🏻原文链接：CSS 中的hanging-punctuation属性 工具推荐GPT PILOTGPT Pilot 是 Pythagora VS Code 扩展的核心技术，旨在提供第一个真正的 AI 开发者伴侣。它不仅仅是一个自动补全或者 PR 消息的助手，而是一个真正的 AI 开发者，可以编写完整的功能，调试它们，与您讨论问题，请求审查等。 pear-recpear-rec(梨子 rec) 的跨平台是基于 electronjs,前端是基于 reactjs,截图、录屏、录音、录像、录制(动图)gif 等功能是基于 webrtc 和 webcodecs 的一个项目。 行业新闻AI 手机来了，App 将消亡，前端开发范式变了！自打三星推出首款AI手机三星Galaxy S24后，AI 手机的概念越来越火🔥。在上个月的 MWC 2024 上，德国电信联合高通、Brain.ai 推出了一款突破性创新的概念 AI 手机 T phone。与传统智能手机不同，这款手机主打一个“无 App”，它清除了屏幕上的密密麻麻的 App 图标，只留有一个按钮用来激活手机里的 AI 助手，让用户通过类似 ChatGPT 的操作界面来交互。 这款手机的长期愿景是消灭 App，并干掉 App Store，德国电信 CEO 蒂姆·霍特格斯（Tim Hoettges）在大会上给出了疯狂的预测：“手机 App 将在未来五到十年内消亡” 各位读者，你怎么看AI手机？","link":"/2024/03/29/2024/0x20240329/"},{"title":"前端早读精选 - 第十三期","text":"探索前端技术的无尽旅程从这里开始！每周精选前端领域的热门文章。 **文章推荐**：本期为大家带来通过可视化的方式解析Promise的执行过程、67 种浏览器调试技巧，不再是无脑console、Node 与 Bun 一个简单的 WebSocket 性能对比、最受欢迎的 CSS 框架排名 **工具推荐**：用 React 的编码模式去写threeJS – react-three-fiber、写一段文案就能快速生成视频的AI工具 – MoneyPrinterTurbo、利用 Obsidian 插件，也能用上大模型！ **行业新闻**：国内首个AI程序员入职阿里云 如果觉得有收获，欢迎大家点赞👍🏻订阅 文章推荐可视化 Promise 执行文章讲述了JavaScript中Promise的执行机制，解释了new Promise构造函数如何创建Promise，以及Promise在异步任务中的角色。它详细说明了Promise的解决（resolve）和拒绝（reject）过程，以及微任务队列（Microtask Queue）在事件循环中的作用，展示了Promise如何实现非阻塞操作并改善代码的可读性和可维护性。 👉原文链接👉🏻：可视化 Promise 执行 你应该知道的 67 种浏览器调试技巧这篇文章是关于浏览器调试技巧的深入指南，提供了一系列高级方法以帮助开发者更有效地使用开发者工具进行调试。内容包括利用条件断点、监控调用堆栈、动态更改代码行为以及利用浏览器性能分析工具。作者详细解释了如何通过这些技巧查找和解决代码问题，以及如何优化代码性能，使读者能够在调试过程中更加高效和精确。具体技巧如设置智能断点、修改函数运行时行为和性能测试等都有详尽讨论。 👉原文链接👉🏻： 你应该知道的 67 种浏览器调试技巧 Node 与 Bun 一个简单的 WebSocket 性能对比文章介绍了使用JavaScript进行的一个简单WebSocket基准测试，比较了Node.js和Bun两个运行时环境。测试结果显示，在使用WebSocket时，Bun比Node.js快约40%，当切换到专门为Bun编写的JavaScript代码时，Bun的速度是Node.js的两倍。文章强调，这个基准测试旨在测量延迟（即消息往返的时间），而非同时支持的请求数量。 👉原文链接👉🏻：Node 与 Bun 一个简单的 WebSocket 性能对比 The Best CSS Frameworks按 github star 数量排序，40款最受欢迎的 CSS 框架。 Bootstrap 依然强劲！ 工具推荐react-three-fiber一款用 react 的开发方式开发 threeJS。一切在 Threejs 中有效的东西都能使用 React 的编码方式实现。并且得益于 React 的调度能力，它在规模上表现优于 Threejs。通过 JSX 的形式标示 threeJS，实际的转换过程&lt;mesh /&gt; 会动态转换成 new THREE.Mesh()。因此 threejs 版本添加、删除或更改功能，它将立即可用。 MoneyPrinterTurbo利用AI大模型，一键生成高清短视频。只需提供一个视频 主题 或 关键词 ，就可以全自动生成视频文案、视频素材、视频字幕、视频背景音乐，然后合成一个高清的短视频。 给你的 Obsidian 插上 AI 大模型引擎copilot for obsidian的插件和openrouter.ai的AI API，让你的 obsidian 上就能直接使用各种大模型 行业新闻国内首个AI程序员入职阿里云阿里云首个AI程序员“通义灵码”（工号AI001）的入职阿里云啦！这个AI程序员具有编写代码、调试和优化的能力，可以减轻人类程序员的工作量。它能理解和编写超过200种编程语言，其代码续写、查错和优化能力令人印象深刻。 大家怎么看 AI 程序员？","link":"/2024/04/12/2024/0x20240412/"},{"title":"前端早读精选 - 第十四期","text":"探索前端技术的无尽旅程从这里开始！每周精选前端领域的热门文章。 **文章推荐**：本期为大家带来对于 React 框架探讨的《因为React，你遗忘或从未了解过的事物》，从0到1创建一款响应式框架，通过这种方式来学习现代化框架的原理、prettier 深度优化背后的事情、css 小技巧，通过css 给两个元素间画连接线 **工具推荐**：好用的爬虫工具，支持现有主流内容网站–MediaCrawler、强大的数据库实体关系（DBER）在线编辑器–drawdb、AI画图 prompt 词参考 – prompt-marketplace、无需代码即可完成对数据库管理的应用生成工具 – dashpress **行业新闻**：主流框架的 Signals 被纳入 JavaScript 标准提案了、 Vision Pro 版淘宝，用户可以进行何种交互！ 如果觉得有收获，欢迎大家点赞👍🏻订阅 文章推荐因为React，你遗忘或从未了解过的事物这篇文章探讨了React作为一个前端框架已经不再是最佳选择的理由，并指出了其设计和技术上的局限性。React是为了解决特定大型组织的问题而设计的，但随着时间的推移，它的架构决策逐渐成为了迭代的障碍。其次，React强化了一个观念，即需要为特定框架定制开发包和库，这限制了开发者利用广泛的JavaScript库的潜力。在性能、代码简洁性和灵活性方面，React 与一些现代前端框架存在一定的差距。特别是在状态管理和组件生命周期的处理上，React的规则和复杂性导致它与通用Web平台的兼容性较差。React 的 Hooks 虽然在引入时革新了状态管理和逻辑复用的方式，但在 React在渲染优化方面需要频繁的微管理，如对useMemo和useCallback的复杂区分和useEffect依赖数组的精细控制，而这些在其他框架中已被更智能的自动处理所取代。 👉原文链接👉🏻： Things you forgot (or never knew) because of React 通过 DIY 来学习现代 JavaScript 框架的工作方式这篇文章详细讲述了如何一步步基于响应式（reactivity）来进行DOM更新的设计思路来构建一个现代的JavaScript框架。首先，使用Proxy对象创建响应式系统来监控状态变化。然后，通过将渲染函数绑定到状态变化上，实现当状态更新时自动重新渲染UI。此外，通过使用&lt;template&gt;标签和DOM克隆技术优化DOM操作，减少性能消耗。最后，确保每次状态变化都能触发正确的界面更新，完成响应式框架的构建。 👉原文链接👉🏻： Let’s learn how modern JavaScript frameworks work by building one Prettier 性能深度优化作者Fabio Spampinato从零开始重写了CLI，以便从性能角度考虑进行优化。文件查找优化主要通过并行处理和预先过滤非目标文件来实现，这样可以缩短文件扫描的总体时间。至于配置文件解析的优化，则包括了缓存已解析的配置以减少重复计算，以及优化配置继承逻辑以提高处理速度。通过这些策略，Prettier的CLI 能更快地响应用户命令，特别是在大型项目中，这些优化带来了显著的性能提升。 👉原文链接👉🏻： Prettier’s CLI: A Performance Deep Dive 使用 CSS 绘制连接元素的线条这篇文章探讨了如何使用CSS锚点定位（CSS Anchor Positioning）来连接网页元素。作者通过实例展示了如何用CSS而非大量JavaScript来连接不同列中的单词，形成有趣的词组。具体方法包括使用CSS的anchor-name和anchor()函数定位连接线，以及利用CSS网格布局和数据属性来管理元素。这种方法减少了JavaScript的计算需求，将更多的布局责任交给了浏览器。 注意：需要使用 Chrome Canary 来查看演示效果 👉原文链接👉🏻： Drawing a Line to Connect Elements with CSS Anchor Positioning 工具推荐MediaCrawler利用 playwright 搭桥，保留登录成功后的上下文浏览器环境，通过执行JS表达式获取一些加密参数，从而爬取对应网站的数据。目前能抓取小红书、抖音、快手、B站、微博的视频、图片、评论、点赞、转发等信息。 附： 该项目使用了 playwright，对 playwright 感兴趣的同学，可以查看playwright 使用指南 playwright 安装第二步需要下载 Chromium 内核文件,这个过程比较慢。可以先手动下载好这些文件,然后直接复制到对应的目录,跳过第二步的下载过程。能够加快安装速度，避免失败。不同系统对应的安装路径如下: Windows: %USERPROFILE%\\AppData\\Local\\ms-playwright macOS: ~/Library/Caches/ms-playwright Linux: ~/.cache/ms-playwright drawdb这个开源项目是一个免费、简单、强大的数据库实体关系（DBER）在线编辑器，无需注册即可直接在浏览器中使用。它提供了直观、可视化的操作界面，用户通过点击即可构建数据库表和导出建表语句，还可以导入建表语句，实现可视化编辑、错误检查等。支持 MySQL、PostgreSQL、SQLite、MariaDB、SQL Server 共 5 种常用的关系数据库。 dashpress无需编写一行代码即可生成强大的管理应用程序 prompt-marketplace适用于多个平台的免费AI图像提示词。每天更新提示 行业新闻JavaScript 原生 Signals 标准提案关于 Signals 标准提案，该提案与 Promises/A+类似，侧重于使 JavaScript 生态系统保持一致。如果这种对齐成功，那么一个标准可能会出现，该标准基于这种经验。几位框架作者正在此处合作共同制定一个可能支持其响应式的通用模型。当前草案是基于 Angular、Bubble、Ember、FAST、MobX、Preact、Qwik、RxJS、Solid、Starbeam、Svelte、Vue、Wiz 等作者/维护者的设计输入… 用 Vision Pro 逛了一下午淘宝，我发现了一种很新的网购方式未来的网购会是怎样的？足不出户，就能看见商品的 3D 展示；不仅能把产品放大看细节，还能还原 1:1 的真实比例，放在房间的任何角落看看尺寸是否合适；甚至能把毛坯房用虚拟家具堆满，在装修之前就能确定新房的装修风格。 附：作为一个前端开发者，对于这种新的交互模式很感兴趣。这里给大家推荐一款 RN 的 Vision Pro 开发框架 – react-native-visionos那么问题来了，环境搭好了，请问 Vision Pro 去哪里领呀？","link":"/2024/04/19/2024/0x20240419/"},{"title":"前端早读精选 - 第五期","text":"探索前端技术的无尽旅程从这里开始！每周精选前端领域的热门文章。文章方面，本期为大家带来，WebCodecs web 新视频解码新方案、NodeJS 常用工具库、React 生态、Chrome 与 VSCode 小技巧等。工具方面，新一期的 AI 工具推荐、无需构建的前端框架-ofa、commit CI 小工具。话不多说，详细内容请大家查阅。如果觉得有收获，动动大拇指点个赞，以示鼓励！ 文章推荐WebCodecs 开启 Web 音视频新篇章 WebCodecs 提供访问编解码能力的接口，可精细控制音视频数据。通过 WebCodecs 可快速实现视频生产。相较于传统使用 JS或者 WASM 实现编解码能力，WebCodecs 提供了更高的编码性能，其编码速度可达到 ffmpeg.wasm 的 20 倍。在视频的消费侧，WebCodecs 支持缓冲延迟控制、逐帧播放、超快速播放、解码控制等。能够支持构建更强、体验更好的视频消费应用。同时在计算维度，能够实现算力成本转移，将服务端的视频转换成本放在用户本地运行，不仅降低了服务运营成本，还能提升用户体验。更多 Demo 体验 Node.js Power Tools: 13 Libraries Every Developer Should Know 文章列举了 NodeJS 日常开放中 13 个常用工具库，涉及数据库、网络请求、邮件、登录验证中间件、异步任务管理、日志输出等。 Use Chrome DevTools Like a Senior Frontend Developer 调试 Chrome 工具的小技巧包括如何迅速重新发送请求、复制 JavaScript 变量、使用快捷键选择 DOM 元素，屏幕快速截图或精准截图。此外，还能在调试过程中快速安装 NPM 包，以供进一步调试，同时在调试断点时添加条件判断，迅速定位问题所在。欲获取更详细的操作指南，请点击查看完整内容。 10个 VSCode 提效技巧–part1、part2 俗话说”工欲善其事，必先利其器“，文章介绍了 VSCode 在日常开发中的一些实用小技巧，快来看看有哪些你常用的操作可以被快捷替换的！ React awesome for 2024 让我们来了解一下，围绕 react 的生态库。包含 react 工程创建、包管理，数据状态、SPA 路由管理，UI库、动画库、组件库、单元测试、跨端等一系列生态建设。 简单而强大：这些场景无 JavaScript 也能轻松应对 Web 开发的第一核心原则就是“最小能力原则”。换而言之，也就是当我们实现目标时，应该选择相对较轻量的编程技术去实现。由于 HTML 和 CSS 的各项功能都是浏览器原生支持的，因此这些功能通常会有更好的性能、更原生、具备更好的用户体验，对可访问性的支持也更好。虽然并非所有的场景都优于 JS（特别是在可访问性方面），但大多数时候，利用浏览器原生功能来实现复杂逻辑，会给用户带来更好的使用体验。 或许换个角度看，可能很多场景我们并不需要前端框架，甚至JavaScript。从新的前端框架的趋势看，越来越多的框架抛弃繁重的框架设计，体现简约。比如最近大火的 htmx。虽然笔者并不看好 htmx，但从一些特定场景来看，htmx 确实更合适。关于 htmx 相关推荐： Htmx 意外走红，我们从 React“退回去”后：代码行数减少 67%，JS 依赖项从 255 下降到 9、 AHA：结合 Astro、htmx 和 Alpine.js 创建通过网络发送 HTML 的现代 Web 应用程序 工具推荐no-build framework - ofa 基于 Web Components，不需要打包的 MVVM 框架。无需繁琐学习，无需 npm、nodejs、webpack，即刻上手。这让笔者想起了 DHH 先前的言论：”前端不再需要构建”。各位同学，你们怎么看待这件事呢？相关信息：前端根本不需要构建！“技术邪教” Ruby on Rails 之父再出激进言论引争议、DHH 锐评 “打包工具”：前端根本不需要构建 (No Build) better-commits 你是否还在为 commit 信息不准确而烦恼，那么 better-commit 将会是一个不错的选择。很多时候，我们为了快速提交，commit 信息会写的很粗略，这样在后续翻找历史代码时，无法直接从 commit 看出当时的改动是为了干什么，只能通过阅读代码来猜测当时的想法。好的 commit 不仅能够帮助自己记录改动说明，也能帮助他人更好的帮你 review 代码。 10个免费的 AI 网站 AI 降噪：https://podcast.adobe.com/enhance 人声消除器：https://vocalremover.org/ 音乐伴奏自动生成 室内设计： https://www.roomgpt.io/ 内容创作者：https://rytr.me/Rytr 是一款人工智能写作助手，可帮助您在短短几秒钟内以极低的成本创建高质量的内容。 脚本转换视频：https://studio.d-id.com/ 文生图：https://leonardo.ai/ 创作无版权音乐：https://soundful.com/ 使用 Adob​​e Firefly 创建和编辑图像: https://firefly.adobe.com/ 使用 AI Meme Generator 将文本转换为 Meme: https://www.supermeme.ai/ Scribble Diffusion：使用 AI 将草图变成精致的图像： https://scribblediffusion.com/ 更多推荐培养写作习惯的4种简单方法 改变自己的心态：为了什么而写作，不去考虑结果，而是去感受这个过程。“*Don’t think in terms of the outcome but your identity and process.*” 有意识的暗示：当碰到有感触的事情，可以记录下来，潜意识的告诉自己，希望能够将对自己有感触的事情分享出去。 即时激励，用有吸引力的写作奖励来激励自己。写作过程中并没有多少多巴胺，但按下发帖按钮却涉及到了。完成一项具有挑战性的任务并取得进展的感觉也是令人欣慰的，你可以通过有意识地认识到这种感觉并记住你正在使你的身份变得更加强大，从而将这种感觉联系起来更强烈。 让写作尽可能顺畅：让写作融入你的生活。 2023 年终总结 你的年终总结写好了吗？不妨让我们来看看其他同学的年度总结吧！项目汇总了 221（持续更新中） 篇年终总结，大家可以挑选自己感兴趣的博主去看看他这一年的年终总结 Web3 游戏在2024的七个预测 本文深入探讨了 Web3 游戏行业的 7 个关键预测。Web3 游戏的未来取决于其提供引人注目且独特的游戏体验、超越市场趋势和投资者优先事项的能力。早期的 NFT 确实存在很大的投机属性，文章预测不可替代代币（NFT）在游戏行业中的作用正在经历重大转变。 NFT 不再仅仅是投机资产，它正在被重新设想为商业模式中的基本要素。各位同学怎么看，欢迎大家踊跃讨论留言。","link":"/2024/01/26/2024/0x20240126/"}],"tags":[{"name":"技术周刊","slug":"技术周刊","link":"/tags/%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A/"}],"categories":[],"pages":[]}